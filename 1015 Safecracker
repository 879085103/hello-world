// 1015.cpp: 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include<iostream>
#include<string>
#include<algorithm>

using namespace std;

int main()
{
	int res;
	string s;
	int a[13];//储存输入的字符所对应的数字
	while (cin >> res && cin >> s && !(res == 0 && s == "END"))
	{
		sort(s.begin(), s.end());//对s排序，便于找到字典序最大一组

		for (int i = 0; i < 13; i++)
		{
			a[i] = 0;
		}//每个例子a[i]清零
		int flag = 0;//判断是否成功
		int v_ = 0, w_ = 0, x_ = 0, y_ = 0, z_ = 0;//存储最大的一组
		for (int i = 0; i < s.size(); i++)
		{
			a[i] = int(s[i] - 'A' + 1);//将字符转化为所对应的数字
		}
		for(int v = 0; v < s.size(); v++)
			for(int w = 0; w < s.size(); w++)
				for(int x = 0; x < s.size(); x++)
					for(int y = 0; y < s.size(); y++)
						for (int z = 0; z < s.size(); z++)
						{
							if (a[v] - a[w] * a[w] + a[x] * a[x] * a[x] - a[y] * a[y] * a[y] * a[y] + a[z] * a[z] * a[z] * a[z] * a[z] == res && v != w && v != x && v != y && v != z && w != x && w != y && w != z && x != y && x != z && y != z)
							{
								flag = 1;
								v_ = v;
								w_ = w;
								x_ = x;
								y_ = y;
								z_ = z;
								
							}
						}
		if (flag == 0)
		{
			cout << "no solution" << endl;
		}
		else
		{
			cout << char(a[v_] + 64) << char(a[w_] + 64) << char(a[x_] + 64) << char(a[y_] + 64) << char(a[z_] + 64) << endl;
		}

	}
    return 0;
}

